package com.chen.algorithm.znn.dynamic;

/**
 * https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/solution/tan-xin-suan-fa-by-liweiwei1419-2/
 *
 * @Auther: zhunn
 * @Date: 2020/10/24 17:23
 * @Description: DP动态规划相关
 */
public class Test {

    /**
     * 买卖股票的最佳时机相关题：
     * 121（最多买卖一次）、122（贪心，最多买卖多次，不限次）、123（最多买卖两次）、188（最多买卖K次）、
     * 309（可以买卖多次，有冷冻期）、714（可以买卖多次，一次买卖含一次手续费）
     * 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）
     *
     * 理解状态转移方程：
     *
     * 人为规定：如果当天买入股票的时候记录「交易发生一次」，如果当天卖出股票，不增加交易次数；
     * 买入股票，手上持有的现金数减少（减去当天股价），相应地，卖出股票，手上持有的现金数增加（加上当天股价）；
     * 难点：还没发生的交易，并且还规定了当天必须持股的状态值应该设置为负无穷
     *
     */

    /** 121. 买卖股票的最佳时机 **/
    //给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
    //如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。
    //注意：你不能在买入股票前卖出股票。
    //
    //示例 1:
    //输入: [7,1,5,3,6,4]
    //输出: 5
    //解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
    //注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。
    //示例 2:
    //输入: [7,6,4,3,1]
    //输出: 0
    //解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。


    /**122. 买卖股票的最佳时机 II **/
    //给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
    //设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。
    //注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
    //
    //示例 1:
    //输入: [7,1,5,3,6,4]
    //输出: 7
    //解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
    //随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
    //示例 2:
    //输入: [1,2,3,4,5]
    //输出: 4
    //解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
    //注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
    //因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
    //示例 3:
    //输入: [7,6,4,3,1]
    //输出: 0
    //解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。


    /** 123. 买卖股票的最佳时机 III **/
    //给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。
    //设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。
    //注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
    //
    //示例 1:
    //输入: [3,3,5,0,0,3,1,4]
    //输出: 6
    //解释: 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
    //随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
    //示例 2:
    //输入: [1,2,3,4,5]
    //输出: 4
    //解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
    //注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
    //因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
    //示例 3:
    //输入: [7,6,4,3,1]
    //输出: 0
    //解释: 在这个情况下, 没有交易完成, 所以最大利润为 0。


    /** 188. 买卖股票的最佳时机  IV **/
    //给定一个整数数组 prices ，它的第 i 个元素 prices[i] 是一支给定的股票在第 i 天的价格。
    //设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。
    //注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
    //         
    //示例 1：
    //输入：k = 2, prices = [2,4,1]
    //输出：2
    //解释：在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。
    //示例 2：
    //输入：k = 2, prices = [3,2,6,5,0,3]
    //输出：7
    //解释：在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。
    //随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。


    /** 309. 最佳买卖股票时机含冷冻期 **/
    //给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。​
    //设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:
    //你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
    //卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
    //示例:
    //输入: [1,2,3,0,2]
    //输出: 3
    //解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]


    /** 714. 买卖股票的最佳时机含手续费 **/
    //给定一个整数数组 prices，其中第 i 个元素代表了第 i 天的股票价格 ；非负整数 fee 代表了交易股票的手续费用。
    //你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。
    //返回获得利润的最大值。
    //注意：这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。
    //
    //示例 1:
    //输入: prices = [1, 3, 2, 8, 4, 9], fee = 2
    //输出: 8
    //解释: 能够达到的最大利润:
    //在此处买入 prices[0] = 1
    //在此处卖出 prices[3] = 8
    //在此处买入 prices[4] = 4
    //在此处卖出 prices[5] = 9
    //总利润: ((8 - 1) - 2) + ((9 - 4) - 2) = 8.

}
